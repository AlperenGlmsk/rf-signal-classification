% Generated by MATLAB(R) 24.2 (R2024b) and Bluetooth Toolbox 24.2 (R2024b).
% Generated on: 03-Dec-2024 20:27:03

%% Generating Bluetooth BR/EDR waveform
% Bluetooth BR/EDR configuration
bluetoothCfg = bluetoothWaveformConfig('Mode', 'BR', ...
    'PacketType', 'FHS', ...
    'LogicalTransportAddress', [0;0;1], ...
    'HeaderControlBits', [1;1;1], ...
    'ModulationIndex', 0.32, ...
    'SamplesPerSymbol', 20, ...
    'WhitenInitialization', [1;1;1;1;1;1;1], ...
    'LLID', [1;1], ...
    'FlowIndicator', true);

bluetoothCfg.PayloadLength = 18;
bluetoothCfg.WhitenStatus = 'On';
bluetoothCfg.DeviceAddress = '0123456789AB';
% input bit source:
in = randi([0 1],18*8,1);


% Generation
bt_waveform = bluetoothWaveformGenerator(in, bluetoothCfg);
payloadLength = getPayloadLength(bluetoothCfg);
filterSpan = 8*any(strcmp(bluetoothCfg.Mode,{'EDR2M','EDR3M'}));
packetDuration = bluetoothPacketDuration(bluetoothCfg.Mode,bluetoothCfg.PacketType,payloadLength);
bt_waveform = bt_waveform(1:(packetDuration+filterSpan)*bluetoothCfg.SamplesPerSymbol);

Fs = 8e+06; % Specify the sample rate of the waveform in Hz

%% Impairments
% AWGN
bt_waveform = awgn(bt_waveform, 20, 'measured');
% Frequency offset
freqOff = comm.PhaseFrequencyOffset('FrequencyOffset', 0, ...
    'SampleRate', 		Fs);
bt_waveform = freqOff(bt_waveform);



%% Visualize
% Time Scope
% timeScope = timescope('SampleRate', Fs, ...
%     'TimeSpanOverrunAction', 'scroll', ...
%     'TimeSpanSource', 'property', ...
%     'TimeSpan', 3.75e-06);
% timeScope(bt_waveform);
% release(timeScope);

%%
signal = bt_waveform;
% Parça boyutu
chunk_size = (length(signal)/100);

% Parça sayısı
num_chunks = floor(length(signal) / chunk_size);

% Sonuçları saklamak için tablolar
real_stats = zeros(num_chunks, 8); % Gerçek kısım istatistikleri
imag_stats = zeros(num_chunks, 8); % Sanal kısım istatistikleri
chunk_indices = (1:num_chunks)'; % Her parçanın indisi

% Parça bazlı hesaplamalar
for i = 1:num_chunks
    % Şu anki parçanın başlangıç ve bitiş indeksleri
    start_idx = (i - 1) * chunk_size + 1;
    end_idx = start_idx + chunk_size - 1;

    % Şu anki parça
    chunk = signal(start_idx:end_idx);

    % Gerçek ve sanal kısımlar
    real_part = real(chunk);
    imag_part = imag(chunk);

    % Gerçek kısım istatistikleri
    real_stats(i, 1) = min(real_part);
    real_stats(i, 2) = max(real_part);
    real_stats(i, 3) = mean(real_part);
    real_stats(i, 4) = median(real_part);
    real_stats(i, 5) = max(real_part) - min(real_part); % Peak-to-peak
    real_stats(i, 6) = rms(real_part); % RMS
    real_stats(i, 7) = std(real_part);
    real_stats(i, 8) = var(real_part);
    
    
    % Sanal kısım istatistikleri
    imag_stats(i, 1) = min(imag_part);
    imag_stats(i, 2) = max(imag_part);
    imag_stats(i, 3) = mean(imag_part);
    imag_stats(i, 4) = median(imag_part);
    imag_stats(i, 5) = max(imag_part) - min(imag_part); % Peak-to-peak
    imag_stats(i, 6) = rms(imag_part); % RMS
    imag_stats(i, 7) = std(imag_part);
    imag_stats(i, 8) = var(imag_part);
end

category = repmat({'bt'}, num_chunks, 1);

% Sonuçları tabloya koyma
real_stats_table_bt = array2table(real_stats, 'VariableNames', ...
    {'Min', 'Max', 'Mean', 'Median', 'PeakToPeak', 'RMS', 'Std', 'Var'});
real_stats_table_bt.Type = category; % Kategori sütununu ekle

imag_stats_table_bt = array2table(imag_stats, 'VariableNames', ...
    {'Min', 'Max', 'Mean', 'Median', 'PeakToPeak', 'RMS', 'Std', 'Var'});

imag_stats_table_bt.Type = category; % Kategori sütununu ekle


